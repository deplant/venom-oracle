// SPDX-License-Identifier: UNLICENSED
pragma ever-solidity >= 0.62.0;

import "../consumer/int/IMedianizedConsumer.tsol";
import "./int/IMedianizedFeed.tsol";
import "./ConsensusMedianized.tsol";
import "./Factory.tsol";

contract TaskMedianizedValueFeed is ConsensusMedianized, IMedianizedFeed, IStorageOwner {

    constructor(TaskSettings taskSettings_, Types.FactorySettings factorySettings_) public onlyFactory returnAllUnreservedTo(_owner) {
        _taskSettings = taskSettings_;
        _factorySettings = factorySettings_;
    }

    // ****************************************************************
    // External - from Consumer
    // ****************************************************************
    function medianizedFeedRequest(address payerAddress_) override external internalMsg reserveGas returnAllUnreserved {
        _transferFeeFromRequesterToFeed(msg.sender, payerAddress_, _taskSettings.executionFee, _taskSettings.executionFee);
    }

    function onReceivedTransfer(address sender_, address consumer_, uint128 valueAmount_, uint128 tokenAmount_) override external internalMsg onlyStorage reserveGas returnAllUnreservedTo(sender_) {
        if (valueAmount_ >= _taskSettings.executionFee && tokenAmount_ >= _taskSettings.executionFee) {
            uint128 medianizedResponse = abi.decode(_prevElectionState.response, uint128);
            IMedianizedConsumer(consumer_).medianizedCallback(medianizedResponse);
        }
    }

    function acceptLockResult(address owner_, uint8 type_, bool hasLocked_) override external internalMsg {

    }

    // ****************************************************************
    // External - from Validator
    // ****************************************************************
    function updateResponse() override external internalMsg reserveGas returnAllUnreserved {
        if (_currElectionState.status == READY) {
            // LET'S START CONSENSUS!!!
            _currElectionState.status = COMMIT;
            _currElectionState.commitStartTimestamp = now;
        }
    }

    // ****************************************************************
    // Internal
    // ****************************************************************

    function _sendResponse() override internal {
        require(_prevElectionState.status == SUCCESS && _currElectionState.status == READY, PHASE_NOT_ENDED);
        //uint16 validators = _prevElectionState.acceptedCount;
        for (ParticipantData participant : _prevElectionState.participants.values()) {
            if (participant.slashValue == 0) {
                _transferFeeFromFeedToValidator(participant.validator, participant.bountyValue, participant.bountyValue);
            }
        }

    }

}
