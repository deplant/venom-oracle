// SPDX-License-Identifier: UNLICENSED
pragma ever-solidity >= 0.62.0;

import "../consumer/int/IPreciseConsumer.tsol";
import "./int/IPreciseFeed.tsol";
import "./ConsensusPrecise.tsol";

contract TaskPreciseValueFeed is ConsensusPrecise, IPreciseFeed, IStorageOwner {

    uint8 nonce_ = 0;

    // ****************************************************************
    // Events
    // ****************************************************************
    event refreshConsensus(address requester); // main event that is monitored by subscribed Oracles

    // ****************************************************************
    // Constructor
    // ****************************************************************
    constructor(TaskSettings taskSettings_, Types.FactorySettings factorySettings_) public onlyFactory returnAllUnreservedTo(_owner) {
        _taskSettings = taskSettings_;
        _factorySettings = factorySettings_;
        _currElectionState.status = READY;
    }

    // ****************************************************************
    // External - from Consumer
    // ****************************************************************
    function preciseFeedRequest(address payerAddress_) override external internalMsg reserveGas {
        _transferFeeFromRequesterToFeed(msg.sender, payerAddress_, _taskSettings.executionFee, _taskSettings.executionFee);
    }

    function onReceivedTransfer(address sender_, address consumer_, uint128 valueAmount_, uint128 tokenAmount_) override external internalMsg onlyStorage reserveGas returnAllUnreservedTo(sender_) {
        if (valueAmount_ >= _taskSettings.executionFee && tokenAmount_ >= _taskSettings.executionFee) {
            IPreciseConsumer(consumer_).preciseCallback(_prevElectionState.response);
        }
    }

    function acceptLockResult(address owner_, uint8 type_, bool hasLocked_) override external internalMsg {

    }

    // ****************************************************************
    // External - from Validator
    // ****************************************************************
    function updateResponse() override external internalMsg reserveGas returnAllUnreserved {
        if (_currElectionState.status == READY) {
            // LET'S START CONSENSUS!!!
            _currElectionState.status = COMMIT;
            _currElectionState.commitStartTimestamp = now;
            emit refreshConsensus(msg.sender);
        }
    }

    function _sendResponse() override internal {
        require(_prevElectionState.status == SUCCESS && _currElectionState.status == READY, PHASE_NOT_ENDED);
        //TODO
        //        for (ParticipantData participant : _prevElectionState.participants.values()) {
        //            if (participant.slashValue == 0) {
        //                _transferFeeFromFeedToValidator(participant.validator, participant.bountyValue, participant.bountyValue);
        //            }
        //        }
    }

}
